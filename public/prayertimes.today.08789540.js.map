{"version":3,"sources":["scripts/prayertimes.today.js"],"names":["window","onload","dateToday","Date","index","getDate","range","log","localStorage","getItem","console","frequency","parseInt","timeOptions","hour12","hour","minute","getRowData","row","date","islamicDay","day","fajarBegins","fajarJamaat","sunrise","dhurBegins","dhurJamaat","asarBegins","asarJamaat","maghribBegins","maghribJamaat","ishaBegins","ishaJamaat","islamicMonthNumber","islamicYear","firstJumah","secondJumah","thirdJumah","map","val","i","hh","mm","split","t","Number","setHours","setMinutes","toLocaleTimeString","islamicMonth","render","data","dateString","valid","today","tomorrow","ishraq","formatTime","time","incH","incM","replace","todaysDateStr","toISOString","toLocaleDateString","year","month","second","islamicDayStr","timeToMins","h","m","calcStyles","before","after","next","style","now","slice","timeInMins","from","to","push","join","sehriClass","fajarClass","dhuhurClass","asarClass","maghribClass","ishaClass","legendClass","some","c","includes","table","filter","Boolean","document","getElementById","innerHTML","querySelector","classList","remove","stored","JSON","parse","isValid","params","URL","location","searchParams","sheetId","get","sheetName","hue","key","error","urlToFetch","documentElement","setProperty","fetchFreshData","update","fetch","then","res","json","values","setItem","stringify","catch","setInterval"],"mappings":"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","file":"prayertimes.today.08789540.js","sourceRoot":"../src","sourcesContent":["import \"../styles/prayertimes.today.css\";\n\nwindow.onload = () => {\n  const dateToday = new Date();\n  const index = dateToday.getDate() + 1;\n  const range = `A${index}:S${index + 1}`;\n\n  const log = window.localStorage.getItem(\"debug\") === \"true\" ? console.log : () => {};\n\n  // poll frequency: download data from server with this frequency\n  // 8 - 11 = once a day\n  // 12 = twice a day\n  // 13 = every hour\n  // 14 = every half an hour\n  // 15 = every 10 minute\n  // 16 = every minute\n  // 18 = every 10 secs\n  // 19 = every 1 secs\n  const frequency = parseInt(window.localStorage.getItem(\"frequency\") || \"12\", 10);\n\n  const timeOptions = {\n    hour12: false,\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  };\n\n  function formatTime(time, incH = 0, incM = 0) {\n    const split = time.replace(/[^ -~]/g, \"\").split(/[\\:\\s]/);\n    const t = new Date(dateToday);\n    t.setHours(Number(split[0]) + incH);\n    t.setMinutes(Number(split[1]) + incM);\n    return t.toLocaleTimeString(\"en-GB\", timeOptions).replace(/[^ -~]/g, \"\");\n  }\n\n  const getRowData = (row) => {\n    const [\n      date,\n      islamicDay,\n      day,\n      fajarBegins,\n      fajarJamaat,\n      sunrise,\n      dhurBegins,\n      dhurJamaat,\n      asarBegins,\n      asarJamaat,\n      maghribBegins,\n      maghribJamaat,\n      ishaBegins,\n      ishaJamaat,\n      islamicMonthNumber,\n      islamicYear,\n      firstJumah = \"\",\n      secondJumah = \"\",\n      thirdJumah = \"\",\n    ] = row.map((val, i) => {\n      const [hh, mm] = val.split(\":\");\n      if (mm) {\n        const t = new Date(dateToday);\n        const h = Number(hh);\n        t.setHours(hh);\n        t.setMinutes(mm);\n        val = t.toLocaleTimeString(\"en-GB\", timeOptions);\n      }\n      return val;\n    });\n    const islamicMonthNames = [\n      \"Muharram\",\n      \"Safar\",\n      \"Rabi al-Awwal\",\n      \"Rabi ath-Thani\",\n      \"Jumadi ul-Ula\",\n      \"Jumadi ul-Akhirah\",\n      \"Rajab\",\n      \"Shaâ€˜ban\",\n      \"Ramadhan\",\n      \"Shawwal\",\n      \"Dhul-Qadah\",\n      \"Dhul-Hijjah\",\n    ];\n    const islamicMonth = islamicMonthNames[islamicMonthNumber - 1];\n\n    return {\n      date,\n      islamicDay,\n      day,\n      fajarBegins,\n      sunrise,\n      fajarJamaat,\n      dhurBegins,\n      dhurJamaat,\n      asarBegins,\n      asarJamaat,\n      maghribBegins,\n      maghribJamaat,\n      ishaBegins,\n      ishaJamaat,\n      islamicMonth,\n      islamicYear,\n      firstJumah,\n      secondJumah,\n      thirdJumah,\n    };\n  };\n\n  function render({ data, dateString }, valid) {\n    log(data, dateString, valid);\n    const today = getRowData(data[0]);\n    const tomorrow = getRowData(data[1] || data[0]);\n    const ishraq = formatTime(today.sunrise, 0, 15);\n\n    const todaysDateStr = `${new Date(\n      valid ? new Date().toISOString() : dateString\n    ).toLocaleDateString(\"en-GB\", {\n      day: \"numeric\",\n      year: \"numeric\",\n      month: \"long\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n    })}`;\n\n    const islamicDayStr = `${today.islamicDay} ${today.islamicMonth} ${today.islamicYear} Hj`;\n    const timeToMins = (t) => {\n      const [h, m] = t\n        .replace(/[^ -~]/g, \"\")\n        .split(\":\")\n        .map(Number);\n      return h * 60 + m;\n    };\n\n    const calcStyles = (time, before = 0, after = 0, next) => {\n      const style = [];\n      const now = timeToMins(new Date().toLocaleTimeString(\"en-GB\", timeOptions).slice(0, 5));\n      const timeInMins = timeToMins(time);\n      const from = timeInMins - before;\n      const to = timeInMins + after;\n      style.push(from <= now && now < to ? \"highlight\" : \"\");\n      if (next && timeInMins !== timeToMins(next)) style.push(\"changing\");\n      return style.join(\" \");\n    };\n\n    // highlight which jamaat time it is now\n    const sehriClass = calcStyles(today.fajarBegins, 30, 0);\n    const fajarClass = calcStyles(today.fajarJamaat, 30, 5);\n    const dhuhurClass = calcStyles(today.dhurJamaat, 0, 10);\n    const asarClass = calcStyles(today.asarJamaat, 0, 10, tomorrow.asarJamaat);\n    const maghribClass = calcStyles(today.maghribBegins, 10, 10);\n    const ishaClass = calcStyles(today.ishaJamaat, 0, 10, tomorrow.ishaJamaat);\n\n    const legendClass = [fajarClass, asarClass, ishaClass].some((c) => c.includes(\"changing\"))\n      ? \"visible\"\n      : \"\";\n\n    const table = `\n<div class=\"date english\">${todaysDateStr}</div>\n<div class=\"date islamic\">${islamicDayStr}</div>\n<table class=\"table\">\n  <thead>\n    <tr><th>Salah</th><th>Begins</th><th>Jamaat</th></tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Fajar</td>\n      <td class=\"${sehriClass}\">${today.fajarBegins}</td>\n      <td class=\"${fajarClass}\">\n        <span class=\"fajar jamaat\">${today.fajarJamaat}</span>\n        <span class=\"fajar jamaat tomorrow\">${tomorrow.fajarJamaat}</span>\n      </td>\n    </tr>\n    <tr>\n      <td>Sunrise</td>\n      <td colspan=2\n          data-text=\"${ishraq}\"\n          class=\"ishraq\"\n      >\n        ${today.sunrise}\n      </td>\n    </tr>\n    <tr>\n      <td>${today.day === \"Fri\" ? \"Jumah\" : \"Zuhr\"}</td>\n      <td>${today.dhurBegins}</td>\n      <td class=\"dhuhur jamaat ${dhuhurClass}\">${\n      today.day === \"Fri\" ? today.firstJumah : today.dhurJamaat\n    }</td>\n    </tr>\n    <tr>\n      <td>Asar</td>\n      <td>${today.asarBegins}</td>\n      <td class=\"asar jamaat ${asarClass}\">\n        <span>${today.asarJamaat}</span>\n        <span class=\"tomorrow\">${tomorrow.asarJamaat}</span>\n      </td>\n      </tr>\n    <tr>\n      <td>Maghrib</td>\n      <td colspan=2 class=\"maghrib ${maghribClass}\">${today.maghribBegins}</td>\n    </tr>\n    <tr>\n      <td>Isha</td>\n      <td>${today.ishaBegins}</td>\n      <td class=\"isha jamaat ${ishaClass}\">\n        <span>${today.ishaJamaat}</span>\n        <span class=\"tomorrow\">${tomorrow.ishaJamaat}</span>\n      </td>\n      </tr>\n    <tr>\n      <td>Jumah</td>\n      <td class=\"jumah\" colspan=2>\n        ${[today.firstJumah, today.secondJumah, today.thirdJumah].filter(Boolean).join(\" / \")}\n      </td>\n    </tr>\n  </tbody>\n</table>\n<div class=\"legend shine ${legendClass}\">â€¢ <span>Changing tomorrow</span></div>\n          `;\n    const table_div = document.getElementById(\"table_div\");\n    //log(\"table html calculated:\", table);\n    table_div.innerHTML = table;\n\n    if (valid) document.querySelector(\".shine\").classList.remove(\"shine\");\n  }\n\n  let stored = JSON.parse(window.localStorage.getItem(\"todays-times\"));\n  const isValid = () =>\n    stored &&\n    new Date().toISOString().slice(0, frequency) === stored.dateString.slice(0, frequency);\n\n  const params = new URL(document.location).searchParams;\n  const sheetId = params.get(\"id\") || \"1qS2o3JQ07qFkUXMBvEZVZ3E8Z_mk0jMXXhxJkQ35LR8\";\n  const sheetName = params.get(\"name\") || \"calc-formatted\";\n  const hue = params.get(\"hue\") || \"170\";\n  const key = params.get(\"key\");\n\n  if (!key) return console.error(\"Error: No API Key provided in the params\");\n\n  const urlToFetch = `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${sheetName}!${range}?key=${key}`;\n  const root = document.documentElement;\n  root.style.setProperty(\"--hue\", parseInt(hue));\n\n  const fetchFreshData = () =>\n    fetch(urlToFetch)\n      .then((res) => res.json())\n      .then((res) => {\n        log({ res });\n        const data = res.values;\n        const dateString = new Date().toISOString();\n        stored = { data, dateString };\n        window.localStorage.setItem(\"todays-times\", JSON.stringify(stored));\n      })\n      .catch(log);\n\n  const update = () => {\n    const valid = isValid();\n    stored && stored.data && render(stored, valid);\n    if (!valid) fetchFreshData().then(() => render(stored, true));\n  };\n  update();\n  window.setInterval(update, 1000);\n};\n"]}