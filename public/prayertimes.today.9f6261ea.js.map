{"version":3,"sources":["scripts/prayertimes.today.js"],"names":["window","onload","dateToday","Date","index","getDate","range","log","localStorage","getItem","console","frequency","parseInt","timeOptions","hour12","hour","minute","getRowData","row","date","islamicDay","day","fajarBegins","fajarJamaat","sunrise","dhurBegins","dhurJamaat","asarBegins","asarJamaat","maghribBegins","maghribJamaat","ishaBegins","ishaJamaat","islamicMonthNumber","islamicYear","firstJumah","secondJumah","thirdJumah","unofficial","map","val","i","hh","mm","split","t","Number","setHours","setMinutes","toLocaleTimeString","islamicMonth","drawData","data","dateString","valid","today","tomorrow","ishraq","formatTime","time","incH","incM","replace","todaysDateStr","toISOString","toLocaleDateString","year","month","second","islamicDayStr","timeToMins","h","m","calcStyles","begins","jamaat","before","after","next","style","now","slice","from","jamaatTime","to","push","join","sehriClass","dhuhurClass","asarClass","maghribClass","ishaClass","legendClass","includes","table","filter","Boolean","document","getElementById","innerHTML","querySelector","classList","remove","stored","JSON","parse","isValid","params","URL","location","searchParams","sheetId","get","sheetName","hue","key","error","urlToFetch","documentElement","setProperty","fetchFreshDataAndUpdate","render","fetch","then","res","json","values","setItem","stringify","catch","setInterval"],"mappings":"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","file":"prayertimes.today.9f6261ea.js","sourceRoot":"../src","sourcesContent":["import \"../styles/prayertimes.today.css\";\n\nwindow.onload = () => {\n  const dateToday = new Date();\n  const index = dateToday.getDate() + 1;\n  const range = `A${index}:S${index + 1}`;\n\n  const log = window.localStorage.getItem(\"debug\") === \"true\" ? console.log : () => {};\n\n  // poll frequency: download data from server with this frequency\n  // 8 - 11 = once a day\n  // 12 = twice a day\n  // 13 = every hour\n  // 14 = every half an hour\n  // 15 = every 10 minute\n  // 16 = every minute\n  // 18 = every 10 secs\n  // 19 = every 1 secs\n  const frequency = parseInt(window.localStorage.getItem(\"frequency\") || \"12\", 10);\n\n  const timeOptions = {\n    hour12: false,\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  };\n\n  function formatTime(time, incH = 0, incM = 0) {\n    const split = time.replace(/[^ -~]/g, \"\").split(/[\\:\\s]/);\n    const t = new Date(dateToday);\n    t.setHours(Number(split[0]) + incH);\n    t.setMinutes(Number(split[1]) + incM);\n    return t.toLocaleTimeString(\"en-GB\", timeOptions).replace(/[^ -~]/g, \"\");\n  }\n\n  const getRowData = (row) => {\n    const [\n      date,\n      islamicDay,\n      day,\n      fajarBegins,\n      fajarJamaat,\n      sunrise,\n      dhurBegins,\n      dhurJamaat,\n      asarBegins,\n      asarJamaat,\n      maghribBegins,\n      maghribJamaat,\n      ishaBegins,\n      ishaJamaat,\n      islamicMonthNumber,\n      islamicYear,\n      firstJumah = \"12:30\",\n      secondJumah = \"13:10\",\n      thirdJumah = \"\",\n      unofficial,\n    ] = row.map((val, i) => {\n      const [hh, mm] = val.split(\":\");\n      if (mm) {\n        const t = new Date(dateToday);\n        const h = Number(hh);\n        t.setHours(hh);\n        t.setMinutes(mm);\n        val = t.toLocaleTimeString(\"en-GB\", timeOptions);\n      }\n      return val;\n    });\n    const islamicMonthNames = [\n      \"Muharram\",\n      \"Safar\",\n      \"Rabi al-Awwal\",\n      \"Rabi ath-Thani\",\n      \"Jumadi ul-Ula\",\n      \"Jumadi ul-Akhirah\",\n      \"Rajab\",\n      \"Shaâ€˜ban\",\n      \"Ramadhan\",\n      \"Shawwal\",\n      \"Dhul-Qadah\",\n      \"Dhul-Hijjah\",\n    ];\n    const islamicMonth = islamicMonthNames[islamicMonthNumber - 1];\n\n    return {\n      date,\n      islamicDay,\n      day,\n      fajarBegins,\n      sunrise,\n      fajarJamaat,\n      dhurBegins,\n      dhurJamaat,\n      asarBegins,\n      asarJamaat,\n      maghribBegins,\n      maghribJamaat,\n      ishaBegins,\n      ishaJamaat,\n      islamicMonth,\n      islamicYear,\n      unofficial,\n      firstJumah,\n      secondJumah,\n      thirdJumah,\n    };\n  };\n\n  function drawData({ data, dateString }, valid) {\n    log(data, dateString, valid);\n    const today = getRowData(data[0]);\n    const tomorrow = getRowData(data[1] || data[0]);\n    const ishraq = formatTime(today.sunrise, 0, 15);\n\n    const todaysDateStr = `${new Date(\n      valid ? new Date().toISOString() : dateString\n    ).toLocaleDateString(\"en-GB\", {\n      day: \"numeric\",\n      year: \"numeric\",\n      month: \"long\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n    })}`;\n\n    const islamicDayStr = `${today.islamicDay} ${today.islamicMonth} ${today.islamicYear} Hj`;\n    const timeToMins = (t) => {\n      const [h, m] = t\n        .replace(/[^ -~]/g, \"\")\n        .split(\":\")\n        .map(Number);\n      return h * 60 + m;\n    };\n\n    const calcStyles = (begins, jamaat, before = 0, after = 0, next) => {\n      const style = [];\n      const now = timeToMins(new Date().toLocaleTimeString(\"en-GB\", timeOptions).slice(0, 5));\n      const from = timeToMins(begins) - before;\n      const jamaatTime = timeToMins(jamaat);\n      const to = jamaatTime + after;\n      style.push(from <= now && now < to ? \"highlight\" : \"\");\n      if (next && jamaatTime !== timeToMins(next)) style.push(\"changing\");\n      return style.join(\" \");\n    };\n\n    // highlight which jamaat time it is now\n    const [sehriClass, dhuhurClass, asarClass, maghribClass, ishaClass] = [\n      calcStyles(today.fajarBegins, today.fajarJamaat, 30, 0),\n      calcStyles(today.dhurBegins, today.dhurJamaat, 0, 10),\n      calcStyles(today.asarBegins, today.asarJamaat, 0, 10, tomorrow.asarJamaat),\n      calcStyles(today.maghribBegins, today.maghribBegins, 10, 10),\n      calcStyles(today.ishaBegins, today.ishaJamaat, 0, 10, tomorrow.ishaJamaat),\n    ];\n    const legendClass =\n      asarClass.includes(\"changing\") || ishaClass.includes(\"changing\") ? \"visible\" : \"\";\n\n    const table = `\n<div class=\"date english\">${todaysDateStr}</div>\n<div class=\"date islamic\">${islamicDayStr}</div>\n<table class=\"table\">\n  <thead>\n    <tr><th>Salah</th><th>Begins</th><th>Jamaat</th></tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Fajar</td>\n      <td class=\"${sehriClass}\">${today.fajarBegins}</td>\n      <td>\n        <span class=\"fajar jamaat\">${today.fajarJamaat}</span>\n        <span class=\"unofficial\">${today.unofficial}</span>\n      </td>\n    </tr>\n    <tr>\n      <td>Sunrise</td>\n      <td colspan=2\n          data-text=\"${ishraq}\"\n          class=\"ishraq\"\n      >\n        ${today.sunrise}\n      </td>\n    </tr>\n    <tr>\n      <td>${today.day === \"Fri\" ? \"Jumah\" : \"Zuhr\"}</td>\n      <td>${today.dhurBegins}</td>\n      <td class=\"dhuhur jamaat ${dhuhurClass}\">${\n      today.day === \"Fri\" ? today.firstJumah : today.dhurJamaat\n    }</td>\n    </tr>\n    <tr>\n      <td>Asar</td>\n      <td>${today.asarBegins}</td>\n      <td class=\"asar jamaat ${asarClass}\">${today.asarJamaat}</td>\n    </tr>\n    <tr>\n      <td>Maghrib</td>\n      <td colspan=2 class=\"maghrib ${maghribClass}\">${today.maghribBegins}</td>\n    </tr>\n    <tr>\n      <td>Isha</td>\n      <td>${today.ishaBegins}</td>\n      <td class=\"isha jamaat ${ishaClass}\">${today.ishaJamaat}</td>\n    </tr>\n    <tr>\n      <td>Jumah</td>\n      <td class=\"jumah\" colspan=2>\n        ${[today.firstJumah, today.secondJumah, today.thirdJumah].filter(Boolean).join(\" / \")}\n      </td>\n    </tr>\n  </tbody>\n</table>\n<div class=\"legend shine ${legendClass}\">â€¢ <span>Changing tomorrow</span></div>\n          `;\n    const table_div = document.getElementById(\"table_div\");\n    //log(\"table html calculated:\", table);\n    table_div.innerHTML = table;\n\n    if (valid) document.querySelector(\".shine\").classList.remove(\"shine\");\n  }\n\n  let stored = JSON.parse(window.localStorage.getItem(\"todays-times\"));\n  const isValid = () =>\n    stored &&\n    new Date().toISOString().slice(0, frequency) === stored.dateString.slice(0, frequency);\n\n  const params = new URL(document.location).searchParams;\n  const sheetId = params.get(\"id\") || \"1qS2o3JQ07qFkUXMBvEZVZ3E8Z_mk0jMXXhxJkQ35LR8\";\n  const sheetName = params.get(\"name\") || \"calc-formatted\";\n  const hue = params.get(\"hue\") || \"170\";\n  const key = params.get(\"key\");\n\n  if (!key) return console.error(\"Error: No API Key provided in the params\");\n\n  const urlToFetch = `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${sheetName}!${range}?key=${key}`;\n  log({ urlToFetch });\n  const root = document.documentElement;\n  root.style.setProperty(\"--hue\", parseInt(hue));\n\n  const fetchFreshDataAndUpdate = () =>\n    fetch(urlToFetch)\n      .then((res) => res.json())\n      .then((res) => {\n        log({ res });\n        const data = res.values;\n        const dateString = new Date().toISOString();\n        stored = { data, dateString };\n        window.localStorage.setItem(\"todays-times\", JSON.stringify(stored));\n      })\n      .catch(log);\n\n  const render = () => {\n    const valid = isValid();\n    stored && stored.data && drawData(stored, valid);\n    if (!valid) fetchFreshDataAndUpdate().then(() => drawData(stored, true));\n  };\n  render();\n  window.setInterval(render, 1000);\n};\n"]}